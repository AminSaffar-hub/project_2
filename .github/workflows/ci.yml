name: ci-cd-pipeline
run-name: lint, test and deploy(only when merged to main) code uploaded by ${{ github.actor }}
on: [push]

jobs:

  changes:
    runs-on: ubuntu-latest
    outputs:
      build_base_image: ${{ steps.changes.outputs.base }}
    steps:
    - uses: actions/checkout@v4
    - uses: dorny/paths-filter@v2
      id: changes
      with:
        base: ${{ github.ref }}
        filters: |
          build_base_image:
            - 'poetry.lock'
            - 'pyproject.toml'

  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.9  # Adjust the Python version as needed

      - name: Install dependencies
        run: |
          pip3 install flake8==6.0.0
          pip3 install black==23.3.0

      - name: Run Black
        run: black . --check

      - name: Run Flake8
        run: flake8
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.9  # Adjust the Python version as needed
      #----------------------------------------------
      #  -----  install & configure poetry  -----
      #----------------------------------------------
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true
      #----------------------------------------------
      #       load cached venv if cache exists
      #----------------------------------------------
      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v3
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}
      #----------------------------------------------
      # install dependencies if cache does not exist
      #----------------------------------------------
      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root
      #----------------------------------------------
      # install your root project, if required
      #----------------------------------------------
      - name: Install project
        run: poetry install --no-interaction

      - name: Run tests
        run: cd backend && poetry run python manage.py test

  Deliver:
    needs: [changes, lint, test]
    runs-on: ubuntu-latest
    if: |
      always() &&
      needs.changes.outputs.build_base_image == 'true' &&
      github.ref == 'refs/heads/main'

    steps:
    - name: Checkout
      uses: actions/checkout@v4
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    - name: Build and push
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: modamine/promotions-scrapper-base:latest
        file: Dockerfile.base

  Deploy:
    needs: [lint, test, Deliver]
    runs-on: ubuntu-latest
    if: |
      always() &&
      (needs.Deliver.result == 'success' || needs.Deliver.result == 'skipped') &&
      github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v3
      - name: Deploy in EC2
        env:
            PRIVATE_KEY: ${{ secrets.EC2_SSH_KEY  }}
            HOSTNAME : ${{ secrets.HOST_DNS  }}
            USER_NAME : ${{ secrets.USERNAME  }}
            
        run: |
          echo "$PRIVATE_KEY" > private_key && chmod 400 private_key
          ssh -o StrictHostKeyChecking=no -i private_key ${USER_NAME}@${HOSTNAME} '
          
            #Now we have got the access of EC2 and we will start the deploy .
            cd ~/project_2 &&
            git checkout main &&
            git fetch --all &&
            git reset --hard origin/main &&
            git pull origin main &&
            bash deploy.sh
          '